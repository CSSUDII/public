{"version":3,"sources":["Pages/Register/Register.module.css","Pages/Login/Login.module.css","serviceWorker.js","config.js","Pages/Login/Login.js","Pages/Register/Register.js","Pages/Dashboard/Dashboard.js","Pages/NotFound/NotFound.js","Pages/Profile/Porfile.js","Routes.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","config","baseUrl","Login","useForm","register","handleSubmit","errors","useState","message","setMessage","history","useHistory","className","styles","container","loginFormContainer","type","role","data","aria-hidden","onClick","loginFormLegend","onSubmit","e","fetch","method","headers","body","JSON","stringify","then","res","json","result","error","localStorage","setItem","token","console","log","push","target","reset","noValidate","autoComplete","htmlFor","id","name","aria-describedby","placeholder","ref","required","value","email","errorMessage","password","to","Register","registrationFormContainer","registrationFormLegend","hasError","pattern","minLength","maxLength","Dashboard","dashboard","setDashboard","useEffect","getItem","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","confirm","clear","_id","title","content","NotFound","Profile","class","rel","Routes","props","path","render","Component","exact","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fd3019c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Register_container__zq2jF\",\"registrationFormContainer\":\"Register_registrationFormContainer__1GdV5\",\"registrationFormLegend\":\"Register_registrationFormLegend__3K-hM\",\"errorMessage\":\"Register_errorMessage__2ms82\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__2d8k8\",\"loginFormContainer\":\"Login_loginFormContainer__1Xh_5\",\"loginFormLegend\":\"Login_loginFormLegend__1x_Ru\",\"errorMessage\":\"Login_errorMessage__1OCkv\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const config = {\n    baseUrl: \"https://cssudii.tunnelto.dev/v1\", //no trialing slash here\n};\n\nexport default config;","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport styles from \"./Login.module.css\";\n\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"react-router-dom\";\nimport config from \"../../config\";\n\nconst Login = () => {\n  const { register, handleSubmit, errors } = useForm();\n  const [message, setMessage] = useState();\n  const history = useHistory();\n\n  const onSubmit = (data, e) => {\n    setMessage({\n      data: \"Login is in progress...\",\n      type: \"alert-warning\",\n    });\n    fetch(`${config.baseUrl}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((res) => res.json())\n      .then(\n        (result, error) => {\n          setMessage({\n            data: error || \"Logged in successfully, redirecting...\",\n            type: error ? \"alert-danger\" : \"alert-success\",\n          });\n  \n          !error &&\n              localStorage.setItem(\"token\", result.token);\n              console.log('Your TOKEN: ' + result.token)\n              history.push(\"/dashboard\");\n  \n          !error && e.target.reset();\n        }\n      )\n  };\n\n  return (\n    <div\n      className={`${styles.container} container-fluid d-flex align-items-center justify-content-center`}\n    >\n      <div className={styles.loginFormContainer}>\n        {message && (\n          <div\n            className={`alert fade show d-flex ${message.type}`}\n            role=\"alert\"\n          >\n            {message.data}\n            <span\n              aria-hidden=\"true\"\n              className=\"ml-auto cursor-pointer\"\n              onClick={() => setMessage(null)}\n            >\n              &times;\n            </span>\n          </div>\n        )}\n        <fieldset className=\"border p-3 rounded\">\n          <legend\n            className={`${styles.loginFormLegend} border rounded p-1 text-center`}\n          >\n            Login Form\n          </legend>\n          <form onSubmit={handleSubmit(onSubmit)} noValidate autoComplete=\"off\">\n            <div className=\"form-group\">\n              <label htmlFor=\"inputForEmail\">Email address</label>\n              <span className=\"mandatory\">*</span>\n              <input\n                id=\"inputForEmail\"\n                name=\"email\"\n                type=\"email\"\n                className=\"form-control\"\n                aria-describedby=\"Enter email address\"\n                placeholder=\"Enter email address\"\n                ref={register({\n                  required: {\n                    value: true,\n                    message: \"Please enter your email address\",\n                  },\n                })}\n              />\n              {/**\n               * we provide validation configuration for email field above\n               * error message are displayed with code below\n               */}\n              {errors.email && (\n                <span className={`${styles.errorMessage} mandatory`}>\n                  {errors.email.message}\n                </span>\n              )}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"inputForPassword\">Password</label>\n              <span className=\"mandatory\">*</span>\n              <input\n                type=\"password\"\n                name=\"password\"\n                className=\"form-control\"\n                id=\"inputForPassword\"\n                placeholder=\"Enter password\"\n                ref={register({\n                  required: {\n                    value: true,\n                    message: \"Please enter password\",\n                  },\n                })}\n              />\n              {errors.password && (\n                <span className={`${styles.errorMessage} mandatory`}>\n                  {errors.password.message}\n                </span>\n              )}\n            </div>\n            <div className=\"d-flex align-items-center\">\n              <button type=\"submit\" className=\"btn btn-outline-primary\">\n                Login\n              </button>\n\n              <button className=\"btn btn-link ml-auto\">\n                <Link to=\"/register\">New User</Link>\n              </button>\n            </div>\n          </form>\n        </fieldset>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React, { useState } from \"react\";\nimport styles from \"./Register.module.css\";\n\nimport { useForm } from \"react-hook-form\";\nimport { Link } from \"react-router-dom\";\nimport config from \"../../config\";\n\nconst Register = () => {\n  const { register, handleSubmit, errors } = useForm();\n  const [message, setMessage] = useState();\n\n  const onSubmit = (data, e) => {\n    setMessage({\n      data: \"Registration is in progress...\",\n      type: \"alert-warning\",\n    });\n    fetch(`${config.baseUrl}/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        const hasError = \"error\" in data && data.error != null;\n        setMessage({\n          data: hasError ? data.error : \"Registered successfully\",\n          type: hasError ? \"alert-danger\" : \"alert-success\",\n        });\n\n        !hasError && e.target.reset();\n      });\n  };\n\n  return (\n    <div\n      className={`${styles.container} container-fluid d-flex align-items-center justify-content-center`}\n    >\n      <div className={styles.registrationFormContainer}>\n        {message && (\n          <div\n            className={`alert fade show d-flex ${message.type}`}\n            role=\"alert\"\n          >\n            {message.data}\n            <span\n              aria-hidden=\"true\"\n              className=\"ml-auto cursor-pointer\"\n              onClick={() => setMessage(null)}\n            >\n              &times;\n            </span>\n          </div>\n        )}\n        <fieldset className=\"border p-3 rounded\">\n          <legend\n            className={`${styles.registrationFormLegend} border rounded p-1 text-center`}\n          >\n            Registration Form\n          </legend>\n          <form onSubmit={handleSubmit(onSubmit)} noValidate autoComplete=\"off\">\n            <div className=\"form-group\">\n              <label htmlFor=\"inputForEmail\">Email address</label>\n              <span className=\"mandatory\">*</span>\n              <input\n                id=\"inputForEmail\"\n                name=\"email\"\n                type=\"email\"\n                className=\"form-control\"\n                aria-describedby=\"Enter email address\"\n                placeholder=\"Enter email address\"\n                ref={register({\n                  required: {\n                    value: true,\n                    message: \"Please enter your email address\",\n                  },\n                  pattern: {\n                    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                    message: \"Enter a valid email address\",\n                  },\n                  minLength: {\n                    value: 6,\n                    message: \"Minimum 6 characters are allowed\",\n                  },\n                  maxLength: {\n                    value: 255,\n                    message: \"Maximum 255 characters are allowed\",\n                  },\n                })}\n              />\n              {/**\n               * we provide validation configuration for email field above\n               * error message are displayed with code below\n               */}\n              {errors.email && (\n                <span className={`${styles.errorMessage} mandatory`}>\n                  {errors.email.message}\n                </span>\n              )}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"inputForName\">Your Name</label>\n              <span className=\"mandatory\">*</span>\n              <input\n                id=\"inputForName\"\n                name=\"name\"\n                type=\"text\"\n                className=\"form-control\"\n                aria-describedby=\"Enter your name\"\n                placeholder=\"Enter your name\"\n                ref={register({\n                  required: {\n                    value: true,\n                    message: \"Please enter your name\",\n                  },\n                  minLength: {\n                    value: 6,\n                    message: \"Minimum 6 characters are allowed\",\n                  },\n                  maxLength: {\n                    value: 255,\n                    message: \"Maximum 255 characters are allowed\",\n                  },\n                })}\n              />\n              {errors.name && (\n                <span className={`${styles.errorMessage} mandatory`}>\n                  {errors.name.message}\n                </span>\n              )}\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"inputForPassword\">Password</label>\n              <span className=\"mandatory\">*</span>\n              <input\n                type=\"password\"\n                name=\"password\"\n                className=\"form-control\"\n                id=\"inputForPassword\"\n                placeholder=\"Enter password\"\n                ref={register({\n                  required: {\n                    value: true,\n                    message: \"Please enter password\",\n                  },\n                  minLength: {\n                    value: 6,\n                    message: \"Minimum 6 characters are allowed\",\n                  },\n                  maxLength: {\n                    value: 255,\n                    message: \"Maximum 255 characters are allowed\",\n                  },\n                })}\n              />\n              {errors.password && (\n                <span className={`${styles.errorMessage} mandatory`}>\n                  {errors.password.message}\n                </span>\n              )}\n            </div>\n            <div className=\"d-flex align-items-center justify-content-center\">\n              <button type=\"submit\" className=\"btn btn-outline-primary\">\n                Submit\n              </button>\n              <button className=\"btn btn-link\">\n                <Link to=\"/login\">Cancel</Link>\n              </button>\n            </div>\n          </form>\n        </fieldset>\n      </div>\n    </div>\n  );\n};\n\nexport default Register;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport config from \"../../config\";\n\nconst Dashboard = () => {\n  const [dashboard, setDashboard] = useState(null);\n  const history = useHistory();\n\n  const logout = () => {\n    /* eslint-disable */\n    const toLogout = confirm(\"Are you sure to logout ?\");\n    /* eslint-enable */\n    if (toLogout) {\n      localStorage.clear();\n      history.push(\"/login\");\n    }\n  };\n\n  useEffect(() => {\n    fetch(`${config.baseUrl}/auth/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": localStorage.getItem(\"token\"),\n      },\n    })\n      .then((res) => res.json())\n      .then(({ error, data }) =>\n        error ? history.push(\"/login\") : setDashboard(data)\n      );\n  }, [history]);\n\n  return (\n    <>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"/\">\n          CSSUDII API\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarText\"\n          aria-controls=\"navbarText\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"/dashboard\">\n                Dashboard <span className=\"sr-only\">(current)</span>\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <span\n                className=\"nav-link cursor-pointer\"\n                onClick={() => logout()}\n              >\n                Logout\n              </span>\n            </li>\n          </ul>\n          <span className=\"navbar-text\">Welcome, {dashboard?._id}</span>\n        </div>\n      </nav>\n      <div className=\"px-3\">\n        <h1>Test: {dashboard?.title}</h1>\n        <p>{dashboard?.content}</p>\n      </div>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import React from \"react\";\n\nconst NotFound = () => <h1>Page Not Found Page</h1>;\n\nexport default NotFound;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport config from \"../../config\";\n\nconst Profile = () => {\n  const [dashboard, setDashboard] = useState(null);\n  const history = useHistory();\n\n  const logout = () => {\n    /* eslint-disable */\n    const toLogout = confirm(\"Are you sure to logout ?\");\n    /* eslint-enable */\n    if (toLogout) {\n      localStorage.clear();\n      history.push(\"/login\");\n    }\n  };\n\n  useEffect(() => {\n    fetch(`${config.baseUrl}/auth/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"x-access-token\": localStorage.getItem(\"token\"),\n      },\n    })\n      .then((res) => res.json())\n      .then(({ error, data }) =>\n        error ? history.push(\"/login\") : setDashboard(data)\n      );\n  }, [history]);\n\n  return (\n    <>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"/\">\n          CSSUDII API\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarText\"\n          aria-controls=\"navbarText\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarText\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"/dashboard\">\n                Dashboard <span className=\"sr-only\">(current)</span>\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <span\n                className=\"nav-link cursor-pointer\"\n                onClick={() => logout()}\n              >\n                Logout\n              </span>\n            </li>\n          </ul>\n          <span className=\"navbar-text\">Welcome, {dashboard?._id}</span>\n        </div>\n      </nav>\n      <div className=\"px-3\">\n      <body class=\"loggedin\">\n          <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.7.1/css/all.css\"></link>\n\t\t<div class=\"content\">\n\t\t\t<h2>Account Information</h2>\n\t\t\t<div>\n\t\t\t\t<p>Your account details:</p>\n\t\t\t\t<table>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Username:</td>\n\t\t\t\t\t\t<td>{dashboard?.name}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\n\t\t\t\t\t</tr>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<td>Email:</td>\n\t\t\t\t\t\t<td>{dashboard?.email}</td>\n\t\t\t\t\t</tr>\n\n          <tr>\n\t\t\t\t\t\t<td>Account ID:</td>\n\t\t\t\t\t\t<td>{dashboard?._id}</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\t</body>\n      </div>\n    </>\n  );\n};\n\nexport default Profile;\n","import React from \"react\";\n\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\n\nimport Login from \"./Pages/Login/Login\";\nimport Register from \"./Pages/Register/Register\";\nimport Dashboard from \"./Pages/Dashboard/Dashboard\";\nimport NotFound from \"./Pages/NotFound/NotFound\";\nimport Profile from \"./Pages/Profile/Porfile\";\n\nconst authGuard = (Component) => () => {\n  return localStorage.getItem(\"token\") ? (\n    <Component />\n  ) : (\n    <Redirect to=\"/login\" />\n  );\n};\nconst Routes = (props) => (\n  <Router {...props}>\n    <Switch>\n      <Route path=\"/login\">\n        <Login />\n      </Route>\n      <Route path=\"/register\">\n        <Register />\n      </Route>\n      <Route path=\"/dashboard\" render={authGuard(Dashboard)}></Route>\n      <Route exact path=\"/\">\n        <Redirect to=\"/dashboard\" />\n      </Route>\n      <Route path=\"/profile\">\n        <Profile />\n      </Route>\n      <Route path=\"*\">\n        <NotFound />\n      </Route>\n    </Switch>\n  </Router>\n);\n\nexport default Routes;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport Routes from \"./Routes\";\n\nReactDOM.render(<Routes />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}